8.1. Пајтон подсетник - дефинисање функција
============================================

До сада смо користили неколико функција из библиотеке Пајгејм. Функције попут ``pg.Color()``, ``pg.draw`` омогућиле 
су нам да бојимо елементе или да цртамо одређене облике. Међутим, некад ће нам бити јако корисно да направимо 
сопствене функције које ће нам омогућити да много лакше цртамо одређене елементе. 

Као што сигурно знаш, Пајтон омогућује корисницима да дефинишу своје функције. Дефиниција функције почиње речју 
``def``, након тога се наводи назив функције, затим у заградама улазни параметри функције и на крају првог реда 
симбол ``:`` (двотачка). Након те прве линије наводи се тело функције, које мора бити увучено. Велики број 
функција у свом телу има наредбу ``return``, која означава које ће вредности функција вратити. Међутим, ми ћемо 
у раду са Пајгејмом углавном користити функције које не враћају вредности, већ мењају стање програма. На пример, 
када позовемо ``pg.draw.line`` она нам неће вратити неку вредност већ 
ће нацртати линију. 

Функције се позивају тако што се наведе њихов назив и у загради  се наведу вредности аргумената.

.. activecode:: definisanje_funkcija_podsetnik
   :nocodelens:
   :modaloutput: 
   :enablecopy:
   :playtask:
   :includexsrc: _includes/uokviren_krug.py

   def uokviren_krug(prozor, boja, centar, poluprecnik): #definišemo funkciju
       pg.draw.circle(prozor, boja, centar, poluprecnik) #pišemo telo funkcije
       pg.draw.circle(prozor, pg.Color("black"), centar, poluprecnik, 1) #pišemo telo funkcije
   
   uokviren_krug(prozor, pg.Color("yellow"), (90, 80), 45) #pozivamo funkciju

У горњем примеру дефинисали смо функцију којој се као аргументи унесу параметри за цртање неког круга и она тај круг нацрта са црном кружницом дебљине 1 пиксел. Након тога позвивамо ту функцију, тако да када покренемо програм, он исцртава такав круг. Обрати пажњу како су наведени аргументи приликом дефинисања функције и како су исти ти аргументи употребљени у телу функцијe и, на крају, како су ти аргументи наведени приликом позива функције. Приликом дефинисања функције пишемо уопштен аргумент који ће своје конкретне вредности добити тек приликом позива функције. Обрати пажњу како је приликом дефинисања функције тамо где треба да се нађу координате центра остављено само ``centar`` да би касније у позиву на то место био уписан уређен пар координата. Исто тако, приликом дефинисања функције аргументи ``boja`` и ``poluprecnik`` налазе се на месту онога што ће приликом позива функције добити конкретне вредности. 

Покушај сада да, угледајући се на претходни пример, допуниш следећи програм. Требало би да напишеш функцију која ће цртати уоквирени квадрат и да је позовеш тако да нацрта три квадрата размакнута један од другог по педесет пиксела.

.. activecode:: uokvireno_vezba
   :nocodelens:
   :modaloutput: 
   :enablecopy:
   :playtask:
   :includexsrc: _includes/uokvireno_vezba.py

   prozor.fill(pg.Color("white"))

   def uokviren_kvadrat(???, ???, ???, ???, ???):
       pg.draw.rect(prozor, boja, (x, y, stranica, ???))
       pg.draw.rect(prozor, pg.Color("black"), (???, ???, ???, ???), 1)

   #pozivamo funkciju 3 puta 
   uokviren_kvadrat(prozor, pg.Color"green", 50, 50, 50 )
   uokviren_kvadrat(???, ???, ???, ???, ???)
   ???

Покушај сада да сам/сама напишеш функцију за цртање уоквиреног правоугаоника и да је затим позовеш три пута да би нацртао/нацртала три правоугаоника који се налазе један изнад другог и размак између њих је 50 пискела. 

.. activecode:: uokvireno_vezba_pravogaonik
   :nocodelens:
   :modaloutput: 
   :enablecopy:
   :playtask:
   :help:
   :includexsrc: _includes/uokvireno_vezba_pravougaonik.py

   prozor.fill(pg.Color("white"))

   def uokviren_pravougaonik(???, ???, ???, ???, sirina, visina):
       ???
       ???
       
   uokviren_pravougaonik(???, ???, 50, 50, ???, ???)
   ???
   ???